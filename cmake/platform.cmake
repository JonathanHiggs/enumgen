function(detect_platform)

    set(CODEGEN_COMPILE_DEFINITIONS "")

    # Platform
    if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
        set(CODEGEN_PLATFORM_WIN TRUE PARENT_SCOPE)
        set(CODEGEN_PLATFORM_LINUX FALSE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_PLATFORM_WIN")
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CODEGEN_PLATFORM_WIN FALSE PARENT_SCOPE)
        set(CODEGEN_PLATFORM_LINUX TRUE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_PLATFORM_LINUX")
    else()
        message(FATAL_ERROR "Unsupported platform: ${CMAKE_SYSTEM_NAME}")
    endif()

    # Compiler
    if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        set(CODEGEN_COMPILER_MSVC TRUE PARENT_SCOPE)
        set(CODEGEN_COMPILER_GCC FALSE PARENT_SCOPE)
        set(CODEGEN_COMPILER_CLANG FALSE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_COMPILER_MSVC")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CODEGEN_COMPILER_MSVC FALSE PARENT_SCOPE)
        set(CODEGEN_COMPILER_GCC TRUE PARENT_SCOPE)
        set(CODEGEN_COMPILER_CLANG FALSE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_COMPILER_GCC")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(CODEGEN_COMPILER_MSVC FALSE PARENT_SCOPE)
        set(CODEGEN_COMPILER_GCC FALSE PARENT_SCOPE)
        set(CODEGEN_COMPILER_CLANG TRUE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_COMPILER_CLANG")
    else()
        message(FATAL_ERROR "Unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    # STD version
    if (CMAKE_CXX_STANDARD STREQUAL "23")
        set(CODEGEN_STD_VERSION 23 PARENT_SCOPE)
        list(APPEND CODEGEN_HAS_CXX23 PARENT_SCOPE)
        list(APPEND CODEGEN_HAS_CXX20 PARENT_SCOPE)
        list(APPEND CODEGEN_HAS_CXX17 PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_HAS_CXX17" "CODEGEN_HAS_CXX20" "CODEGEN_HAS_CXX23")
    elseif(CMAKE_CXX_STANDARD STREQUAL "20")
        list(APPEND CODEGEN_HAS_CXX20 PARENT_SCOPE)
        list(APPEND CODEGEN_HAS_CXX17 PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_HAS_CXX17" "CODEGEN_HAS_CXX20")
    elseif(CMAKE_CXX_STANDARD STREQUAL "17")
        list(APPEND CODEGEN_HAS_CXX17 PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_HAS_CXX17")
    else()
        message(FATAL_ERROR "Unknown CXX standard: ${CMAKE_CXX_STANDARD}")
    endif()

    # Build variant
    if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_CONFIGURATION_TYPES STREQUAL "Debug")
        set(CODEGEN_BUILD_DEBUG TRUE PARENT_SCOPE)
        set(CODEGEN_BUILD_RELEASE FALSE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_BUILD_DEBUG")
    else()
        set(CODEGEN_BUILD_DEBUG FALSE PARENT_SCOPE)
        set(CODEGEN_BUILD_RELEASE TRUE PARENT_SCOPE)
        list(APPEND CODEGEN_COMPILE_DEFINITIONS "CODEGEN_BUILD_RELEASE")
    endif()

    set(CODEGEN_COMPILE_DEFINITIONS ${CODEGEN_COMPILE_DEFINITIONS} PARENT_SCOPE)

    message("CODEGEN_COMPILE_DEFINITIONS:")
    foreach(DEF IN LISTS CODEGEN_COMPILE_DEFINITIONS)
        message("    ${DEF}")
    endforeach()

endfunction()