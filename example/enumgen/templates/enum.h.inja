// clang-format off
/* Generated code, any modifications will be lost */

#pragma once

#include <array>
#include <string_view>
#include <optional>
#include <ostream>
#include <vector>


namespace {{ enum.namespace }}
{

{% if existsIn(enum, "description") %}
    /// <summary>
    /// {{ enum.description }}
    /// </summary>
{% endif %}
    class {{ enum.name }} final
    {
    public:
        using UnderlyingType = {% if existsIn(enum, "underlyingType") %}{{ enum.underlyingType }}{% else %}int{% endif %};

        enum ValuesType : UnderlyingType
        {
{% for item in enum.items %}
            {{ item.name }}{% if existsIn(item, "value") %} = {{ item.value }}{% endif %}{% if not loop.is_last %},{% endif %}

{% endfor %}
        };

    private:
        ValuesType value;

    public:
{% if existsIn(enum, "default") %}
        /// <summary>
        /// Initialized a {{ enum.name }} with the default value of {{ enum.name }}::{{ enum.default }}
        /// </summary>
        constexpr {{ enum.name }}() noexcept : value(ValuesType::{{ enum.default }})
        { }

{% endif %}
        /// <summary>
        /// Initialized a {{ enum.name }} with the specified value
        /// </summary>
        explicit constexpr {{ enum.name }}(ValuesType value) noexcept : value(value)
        { }

        /// <summary>
        /// Initialized a {{ enum.name }} parsed from the specified value, or throws if the string is invalid
        /// </summary>
        explicit {{ enum.name }}(std::string_view str);

        /// <summary>
        /// Implicit cast to the underlying enum value
        /// </summary>
        [[nodiscard]] constexpr operator ValuesType() const noexcept
        {
            return value;
        }

        explicit operator bool() = delete;

        /// <summary>
        /// Helper to up-cast from the enum value to the enum type
        /// </summary>
        [[nodiscard]] friend constexpr {{ enum.name }} operator+({{ enum.name }}::ValuesType value)
        {
            return {{ enum.name }}(value);
        }

        /// <summary>
        /// Helper to retrieve the enum represented as the underling integral type
        /// </summary>
        [[nodiscard]] constexpr UnderlyingType ToUnderlying() const noexcept
        {
            return static_cast<UnderlyingType>(value);
        }

        /// <summary>
        /// Returns the number of values in the enum
        /// </summary>
        [[nodiscard]] static constexpr size_t Size() noexcept
        {
            return {{ length(enum.items) }}ul;
        }

        /// <summary>
        /// Returns an array with all {{ enum.name }} values
        /// </summary>
        [[nodiscard]] static std::array<{{ enum.name }}, {{ length(enum.items) }}ul> const & Values() noexcept;

        /// <summary>
        /// Returns the name of the enum
        /// </summary>
        [[nodiscard]] static std::string_view Name() noexcept;

        /// <summary>
        /// Returns a string representation of the enum value
        /// </summary>
        [[nodiscard]] std::string_view ToString() const noexcept;

        /// <summary>
        /// Inserts a string representation of the enum value in the output stream
        /// </summary>
        friend std::ostream & operator<<(std::ostream & os, {{ enum.name }} value)
        {
            return os << value.ToString();
        }

        /// <summary>
        /// Parses the supplied string into a {{ enum.name }} value, or throws if the string is invalid
        /// </summary>
        [[nodiscard]] static {{ enum.name }} Parse(std::string_view str);

        /// <summary>
        /// Tries to parse the supplied string into a {{ enum.name }} value
        /// </summary>
        [[nodiscard]] static std::optional<{{ enum.name }}> TryParse(std::string_view str);
    };

} // namespace {{ enum.namespace }}
// clang-format on